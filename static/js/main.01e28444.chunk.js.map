{"version":3,"sources":["constants.js","components/hooks/useVerification.js","components/hooks/useInput.js","components/hooks/useValidation.js","components/hooks/useAutocomplete.js","components/app/app.js","utils.js","index.js"],"names":["validations","isEmpty","isEmail","failedText","domains","additionDomains","$api","axios","create","withCredentials","baseURL","useInput","initialValue","useState","value","setValue","isDirty","setIsDirty","valid","setEmpty","emailError","setEmailError","useEffect","validation","test","String","toLowerCase","useValidation","verification","textVerification","disabledButton","setVerification","handleClick","e","a","preventDefault","post","email","res","text","data","reason","useVerification","autocomplete","showAutocomplete","options","setAutocomplete","index","indexOf","firstLetter","secondLetter","newValue","slice","filter","domain","includes","useAutocomplete","onChange","target","onBlur","theme","createTheme","App","inputValue","setInputValue","debounced","fn","time","timeout","clearTimeout","setTimeout","debounce","disabled","helperText","error","ThemeProvider","Grid","container","component","sx","height","CssBaseline","item","xs","sm","md","backgroundImage","backgroundRepeat","backgroundColor","t","palette","mode","grey","backgroundSize","backgroundPosition","Paper","elevation","square","Box","my","mx","display","flexDirection","alignItems","Avatar","m","bgcolor","Typography","variant","noValidate","onSubmit","mt","TextField","margin","required","fullWidth","id","label","name","autoComplete","autoFocus","className","map","onClick","Button","type","mb","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.01e28444.chunk.js","sourcesContent":["export const validations = { isEmpty: true, isEmail: true };\r\n\r\nexport const time = 2000;\r\n\r\nexport const emptyText = \"Email cannot be empty\";\r\nexport const notValidText = \"The email is not valid\";\r\n\r\nexport const acceptableText = \"âœ” The email is acceptable\";\r\nexport const failedText = \"The email failed verification check\";\r\nexport const checkText = \"Wait. The email is being verified...\";\r\n\r\nexport const domains = [\"gmail.com\", \"yahoo.com\", \"yandex.ru\", \"mail.ru\", \"hotmail.com\"];\r\nexport const additionDomains = [\"gmail.com\", \"gmail.ua.com\", \"yahoo.com\", \"yahoo.ca\", \"yandex.ru\", \"mail.ru\",\r\n    \"hotmail.com\", \"gmail.uk.com\", \"yahoo.com.au\", \"yandex.uk.ru\", \"yahoo.in\", \"hotmail.de\"];","import { useState, useEffect } from \"react\";\r\nimport axios from 'axios';\r\nimport { acceptableText, failedText, checkText } from \"../../constants\";\r\n\r\nconst $api = axios.create({\r\n    withCredentials: false,\r\n    baseURL: 'http://localhost:5000',\r\n\r\n})\r\n\r\nexport const useVerification = (value) => {\r\n\r\n    const [verification, setVerification] = useState({\r\n        textVerification: \" \",\r\n        disabledButton: false\r\n    });\r\n\r\n    const {textVerification, disabledButton} = verification;\r\n\r\n    useEffect(() => {\r\n        setVerification({...verification, textVerification: ''});\r\n    }, [value])\r\n\r\n    const handleClick = async (e) => {\r\n\r\n        e.preventDefault();\r\n\r\n        setVerification({\"textVerification\": checkText, \"disabledButton\": true});\r\n\r\n        const res = await $api.post('/', {email: value});\r\n\r\n        const text = res.data.reason === \"accepted_email\" ? acceptableText : failedText\r\n\r\n        setVerification({\"textVerification\": text, \"disabledButton\": false});\r\n\r\n    }\r\n\r\n    return {textVerification, disabledButton, handleClick}\r\n\r\n}","import { useState } from 'react';\r\nimport { useValidation } from './useValidation';\r\nimport { useVerification } from './useVerification';\r\nimport { useAutocomplete } from './useAutocomplete';\r\n\r\nexport const useInput = (initialValue, validations) => {\r\n    const [value, setValue] = useState(initialValue);\r\n    const [isDirty, setIsDirty] = useState(false);\r\n\r\n    const onChange = (e) => setValue(e.target.value);\r\n\r\n    const onBlur = (e) => setIsDirty(true);\r\n\r\n    const valid = useValidation(value, validations);\r\n\r\n    const verification = useVerification(value);\r\n\r\n    const autocomplete = useAutocomplete(value);\r\n\r\n    return {\r\n        value,\r\n        onChange,\r\n        onBlur,\r\n        setValue,\r\n        isDirty,\r\n        ...valid,\r\n        ...verification,\r\n        ...autocomplete,\r\n    }\r\n}","import { useState, useEffect } from 'react';\r\n\r\nexport const useValidation = (value, validations) => {\r\n\r\n    const [isEmpty, setEmpty] = useState(true);\r\n    const [emailError, setEmailError] = useState(false);\r\n\r\n    useEffect(() => {\r\n        for (const validation in validations) {\r\n            switch(validation) {\r\n                case 'isEmpty':\r\n                    value ? setEmpty(false): setEmpty(true)\r\n                    break;\r\n                case 'isEmail':\r\n                    const re = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n                    re.test(String(value).toLowerCase()) ? setEmailError(false) : setEmailError(true);\r\n                    break;\r\n            }\r\n        }\r\n\r\n    }, [value])\r\n\r\n    return {\r\n        isEmpty,\r\n        emailError,\r\n        setEmailError\r\n    }\r\n\r\n}","import { useEffect, useState } from 'react';\r\nimport { domains, additionDomains } from \"../../constants\";\r\n\r\nexport const useAutocomplete = value => {\r\n\r\n    const [autocomplete, setAutocomplete] = useState({\r\n        showAutocomplete: false,\r\n        options: domains\r\n    });\r\n\r\n    const index = value.indexOf(\"@\");\r\n    const firstLetter = value[index + 1]; // first letter after dog;\r\n    const secondLetter = value[index + 2]; // second letter after dog;\r\n\r\n    const newValue = value.slice(0, index + 1);\r\n\r\n    useEffect(() => {\r\n\r\n        if (firstLetter && !secondLetter) {\r\n\r\n            setAutocomplete({\r\n                showAutocomplete: true,\r\n                options: additionDomains.filter(domain => domain[0] === firstLetter)\r\n            })\r\n        }\r\n\r\n        if (value.includes(\"@\") && value === newValue) {\r\n\r\n            setAutocomplete({\r\n                showAutocomplete: true,\r\n                options: domains\r\n            })\r\n        }\r\n\r\n    }, [value])\r\n\r\n\r\n    return { ...autocomplete, setAutocomplete }\r\n}","import * as React from 'react';\nimport { useState } from \"react\";\nimport { Avatar, Button, CssBaseline, TextField, Paper, Box, Grid, Typography } from '@mui/material';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport { useInput } from \"../hooks/useInput\";\nimport { emptyText, time, validations, notValidText, failedText } from \"../../constants\";\nimport { debounce } from \"../../utils\";\n\nimport \"./app.sass\";\n\n\nconst theme = createTheme();\n\nconst App = () => {\n\n    const { isDirty, isEmpty, emailError, onBlur, onChange, handleClick, showAutocomplete, setAutocomplete,\n        textVerification, disabledButton, setEmailError, setValue, options } = useInput('', validations);\n\n    const [inputValue, setInputValue] = useState('');\n\n    const debounced = debounce(onChange, time, setEmailError);\n\n    const disabled = !isDirty || disabledButton || isDirty && isEmpty || isDirty && emailError && !isEmpty;\n\n    const helperText = isDirty && isEmpty ? emptyText : \" \" &&\n    isDirty && emailError && !isEmpty ? notValidText : \" \" &&\n    textVerification ? textVerification : \" \";\n\n    const error = isDirty && isEmpty || isDirty && emailError && !isEmpty || textVerification === failedText;\n\n    return (\n        <ThemeProvider theme={theme}>\n            <Grid container component=\"main\" sx={{ height: '100vh' }}>\n                <CssBaseline />\n                <Grid\n                    item\n                    xs={false}\n                    sm={4}\n                    md={7}\n                    sx={{\n                        backgroundImage: 'url(https://source.unsplash.com/random)',\n                        backgroundRepeat: 'no-repeat',\n                        backgroundColor: (t) =>\n                            t.palette.mode === 'light' ? t.palette.grey[50] : t.palette.grey[900],\n                        backgroundSize: 'cover',\n                        backgroundPosition: 'center',\n                    }}\n                />\n                <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\n                    <Box\n                        sx={{\n                            my: 8,\n                            mx: 4,\n                            display: 'flex',\n                            flexDirection: 'column',\n                            alignItems: 'center',\n                        }}\n                    >\n                        <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n                            <LockOutlinedIcon />\n                        </Avatar>\n                        <Typography component=\"h1\" variant=\"h5\">\n                            Send email\n                        </Typography>\n                        <Box component=\"form\" noValidate onSubmit={handleClick} sx={{ mt: 1 }}>\n                            <TextField\n                                margin=\"normal\"\n                                required\n                                fullWidth\n                                id=\"email\"\n                                label=\"Email Address\"\n                                name=\"email\"\n                                autoComplete=\"off\"\n                                autoFocus\n                                onChange={(e) => {\n                                    debounced(e);\n                                    setInputValue(e.target.value);\n                                }}\n                                onBlur={onBlur}\n                                helperText={helperText}\n                                error={error}\n                                value={inputValue}\n                            />\n                            {showAutocomplete\n                                &&\n                            <div className=\"autocomplete\">\n                                {options.map(domain =>\n                                    <div\n                                        className=\"autocomplete_option\"\n                                        key={domain}\n                                        onClick={() => {\n                                            const value = inputValue.slice(0, inputValue.indexOf(\"@\") + 1);\n                                            setInputValue(value + domain);\n                                            setValue(value + domain);\n                                            setAutocomplete(false);\n                                        }}\n                                    >\n                                        {domain}\n                                    </div>\n                                )}\n                            </div>}\n                            <Button\n                                type=\"submit\"\n                                fullWidth\n                                variant=\"contained\"\n                                sx={{ mt: 3, mb: 2 }}\n                                disabled={disabled}\n                            >\n                                Send email\n                            </Button>\n                        </Box>\n                    </Box>\n                </Grid>\n            </Grid>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","export const debounce = (fn, time, setEmailError) => {\r\n    let timeout;\r\n    return (e) => {\r\n        setEmailError(false);\r\n        if (timeout) clearTimeout(timeout);\r\n        timeout = setTimeout(() => fn(e), time);\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.sass';\nimport App from './components/app/app';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}